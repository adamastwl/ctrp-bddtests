sudo: required
services:
  - docker
language: node_js
addons:
  - firefox: "45.0"
node_js:
  - 6
  
before_install:
  - echo $TRIGGER_REPO
  - echo $AUTHOR
  - echo $TRIGGER_VER
  - echo $CUC_TAG
  # Set Ruby version
  - rvm use --install --default --binary ruby-2.3.1
  # Install dependencies, chrome & chromium, aws cli
  - wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
  - sudo sh -c 'echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
  - sudo apt-get update && sudo apt-get install -y google-chrome-stable awscli chromium-bsu
  # Install xvfb
  - "/sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -ac -screen 0 1280x1024x16"
before_script:
  #- npm install -g protractor@3.3.0 grunt-cli
  #- webdriver-manager update #--versions.chrome 2.24
  # Update Ruby cucumber dependencies
  - gem install bundler
  - bundle install
  # Update Node UI test dependencies
  # - cd nci-match-ui-bddtests
  # - npm install
  - cd ..
  # Version reporting
  - ruby -v
  - bundle --version
  - gem --version
  # Database drop and recreate
  # - mvn -Dhttps.protocols=TLSv1.1,TLSv1.2 -Pinit-db,local sql:execute
  # - cd DataSetup
  # Purge queues
  # - ruby -r "./sqs_utilities.rb" -e "SQSUtilities.purge_queue 'ion_reporter_queue'"
  # - ruby -r "./sqs_utilities.rb" -e "SQSUtilities.purge_queue 'ion_reporter_queue_dlx'"
  # - ruby -r "./sqs_utilities.rb" -e "SQSUtilities.purge_queue 'patient_queue'"
  # - ruby -r "./sqs_utilities.rb" -e "SQSUtilities.purge_queue 'patient_queue_deadletter'"
  # - ruby -r "./sqs_utilities.rb" -e "SQSUtilities.purge_queue 'treatment_arm_queue'"
  # # Run Delete Script to empty DynamoDB before tests start
  # - ruby -r "./match_test_data_manager.rb" -e "MatchTestDataManager.clear_all_int_tables"
  # - ruby -r "./match_test_data_manager.rb" -e "MatchTestDataManager.upload_all_seed_data_to_int"
  # - cd ..
  # # Reset ECOG Mock service Data
  # - curl -X POST "http://pedmatch-int.nci.nih.gov:3000/restart" -d ''
script:

  #- export P1="_p1"
  #- export P2="_p2"
  #- export P3="_p3"
  - export DCT_API_TAG="@DCT_API"
  - export PO_TAG="@PO"
  - export PA_TAG="@PA"
  - export CTRP_DWH_TAG="@CTRP_DWH"
  - export CTRP_MISC_TAG="@CTRP_MISC"
  # clear results directory
  #- ls -alt results
  #- rm results/*
  - echo $CUC_TAG
  - echo $DCT_API
  # run DCT API tests
  - cd ctrp-bddtests/ctrpBackend/
  - cucumber features/ -t @PA_HIGH --format json --out ../results/output.json --expand && cucumber features/ -t @PA_MEDIUM --format json --out ../results/output.json --expand
  - |
    if [ "$CUC_TAG" == "$DCT_API_TAG" ]; then
      cd ctrp-bddtests/ctrpBackend/
      cucumber features/ -t @PA_HIGH --format json --out ../results/output.json --expand && cucumber features/ -t @PA_MEDIUM --format json --out ../results/output.json --expand
    fi
  # run CTRP MISC tests
  - |
    if [ "$CUC_TAG" == "$CTRP_MISC_TAG" ]; then
      cd ctrp-bddtests/ctrpBackend/
      cucumber features/ -t @CTRP_MISC --format json --out ../results/output.json --expand
    fi
  # run CTRP datawarehouse tests
  - |
    if [ "$CUC_TAG" == "$CTRP_DTW_TAG" ]; then
      cd ctrp-bddtests/ctrpBackend/
      cucumber features/ -t @CTRP_DWH --format json --out ../results/output.json --expand
    fi
  # run CTRP PO UI tests
  - |
    if [ "$CUC_TAG" == "$PO_TAG" ]; then
      cd ctrp-bddtests/ctrpUI/
      cucumber features/ -t @CTRP_MISC --format json --out ../results/output.json --expand
    fi
  # run CTRP datawarehouse tests
  - |
    if [ "$CUC_TAG" == "$PA_TAG" ]; then
      cd ctrp-bddtests/ctrpUI/
      cucumber features/ -t @CTRP_DWH --format json --out ../results/output.json --expand
    fi
  # run ctrp-bddtests/ctrpBackend tests by the tag name
  #- cd ctrp-bddtests/ctrpBackend/
  #- ls -ltar
  #- cucumber test_features/ -r test_features/
  #- cucumber features/ -t @PA_HIGH --format json --out ../results/output.json --expand && cucumber features/ -t @PA_MEDIUM --format json --out ../results/output.json --expand
  # run
  #- if [ "$CUC_TAG" = "@CTRP_MISC"]; then cucumber features/ -t @CTRP_MISC --format json --out ../results/output.json --expand; fi
  #- cucumber features/ -t @CTRP_MISC --format json --out ../results/output.json --expand
  #- cucumber features/ -t @CTRP_TRIALS --format json --out ../results/output.json --expand
  #- if [ "$?" = "0" ]; then cucumber test_features/ -t @PA_MEDIUM --format json --out ../results/output.json --expand; fi
  # run by tag(s)
  #- cucumber test_features/ -t @CTRPMICRO-34,@CTRPMICRO-35 --format json --out ../results/output.json --expand
  #- cucumber test_features/ -t @po_high --format json --out ../results/output.json --expand
  #- cucumber test_features/ -t @po_medium --format json --out ../results/output.json --expand
  # - rm results/*
  # - cd uMATCH/PedMATCH; bundle exec parallel_cucumber test_features/ -o '-r test_features/step_definitions/ -r test_features/support/ -t $CUC_TAG$P1,$CUC_TAG$P2 --format json --out ../../results/output-$CUC_TAG$P1-$TEST_ENV_NUMBER.json --expand' -n 2
  # - cd ../..
  # Run Cucumber end to end tests
  # - bundle exec cucumber --tags @EndtoEnd
  # Install xvfb
  #- "export DISPLAY=:99.0"
  #- "sh -e /etc/init.d/xvfb start"
  #- sleep 3 # give xvfb some time to start
  # Run UI tests
  # - cd nci-match-ui-bddtests/
  # Run protractor only if the tag is UI or demo
  # - if [ "$CUC_TAG" = "@ui" -o "$CUC_TAG" = "@demo" ]; then protractor config.js --cucumberOpts.tags='~@broken' --cucumberOpts.tags=$CUC_TAG$P1,$CUC_TAG$P2 --troubleshoot; fi
  # Generate html report
  # - for filename in ../results/*.json; do filesize=$(wc -c <"$filename"); if [ $filesize -le 0 ]; then echo $filename is 0 bytes, deleted it; rm $filename; fi; done
  # - node support/generate_report.js
  # - cd ..
  # To export the results to the JIRA test execution set
  # - curl -H "Content-Type: application/json" -X POST -u ahmeds6:pass --data @results/output.json  https://tracker.nci.nih.gov/rest/raven/1.0/import/execution/cucumber
  # - ls -alt
  # - mv results/ results_critical/; mkdir results
after_success:
  # Run Low tag
  - pwd
  - ls -ltar
  #- cucumber test_features/ -t @PA_LOW --format json --out ../results/output.json --expand
  #- cucumber test_features/ -t @po_low --format json --out ../results/output.json --expand
  #Run P3 cucumber tests
  # - cd uMATCH/PedMATCH; bundle exec parallel_cucumber test_features/ -o '-r test_features/step_definitions/ -r test_features/support/ -t $CUC_TAG$P3 --format json --out ../../results/output-$CUC_TAG$P3-$TEST_ENV_NUMBER.json --expand' -n 2
  #Run protractor tests
  # - cd ../../nci-match-ui-bddtests/
  # - if [ "$CUC_TAG" = "@ui" -o "$CUC_TAG" = "@demo" ]; then protractor config.js --cucumberOpts.tags='~@broken' --cucumberOpts.tags=$CUC_TAG$P3 --troubleshoot; fi
  # # Generate html report
  # - for filename in ../results/*.json; do filesize=$(wc -c <"$filename"); if [ $filesize -le 0 ]; then echo $filename is 0 bytes, deleted it; rm $filename; fi; done
  # - node support/generate_report.js
  # - cd ..
  #- ls -alt

  # Deploy to AWS UAT (comment this to disable UAT push)
  - echo "Deploying to AWS UAT"
  - docker run -it --rm -e AWS_ACCESS_KEY_ID=$UAT_AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$UAT_AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION=us-east-1 silintl/ecs-deploy 
    --cluster CTRP-UAT-Backend --service-name CTRP-$TRIGGER_REPO-UAT 
    -i ctrp/$TRIGGER_REPO:$TRIGGER_VER

  # Trigger Travis script #3, UAT Tests
  # - curl -s -X POST -H "Content-Type:application/json" -H "Accept:application/json" -H "Travis-API-Version:3" -H "Authorization:token $UAT_TRAVIS_TOKEN" -d "{\"request\":{\"message\":\"Triggered by $TRIGGER_REPO $TRAVIS_COMMIT\", \"branch\":\"master\", \"config\":{\"env\":{\"matrix\":[\"TRIGGER_REPO=$TRIGGER_REPO;CUC_TAG=$CUC_TAG\"]}}}}" https://api.travis-ci.org/repo/CBIIT%2Fnci-uMatch-uattests/requests

after_failure:
    #Run P3 cucumber tests
    # - cd uMATCH/PedMATCH; bundle exec parallel_cucumber test_features/ -o '-r test_features/step_definitions/ -r test_features/support/ -t $CUC_TAG$P3 --format json --out ../../results/output-$TEST_ENV_NUMBER.json --expand' -n 2
    # #Run protractor tests
    # - cd ../../nci-match-ui-bddtests/
    # - protractor config.js --cucumberOpts.tags='~@broken' --cucumberOpts.tags=$CUC_TAG$P3 --troubleshoot
    # # Generate html report
    # - for filename in ../results/*.json; do filesize=$(wc -c <"$filename"); if [ $filesize -le 0 ]; then echo $filename is 0 bytes, deleted it; rm $filename; fi; done
    # - node support/generate_report.js
after_script:
  - export DATE_TRIM=`TZ=America/New_York date "+%m-%d-%y"`
  # #Send result json to S3 for review
  # - aws s3 cp ~/build/CBIIT/nci-uMatch-bddtests/results_critical/cucumber_report.html s3://cucumber-test-reports/$DATE_TRIM/critical$CUC_TAG.html --region us-east-1
  # - aws s3 cp ~/build/CBIIT/nci-uMatch-bddtests/results_critical/screenshot s3://cucumber-test-reports/$DATE_TRIM/screenshot --region us-east-1 --recursive
  # - aws s3 cp ~/build/CBIIT/nci-uMatch-bddtests/results/cucumber_report.html s3://cucumber-test-reports/$DATE_TRIM/non-critical$CUC_TAG.html --region us-east-1
  # - aws s3 cp ~/build/CBIIT/nci-uMatch-bddtests/results/screenshot s3://cucumber-test-reports/$DATE_TRIM/screenshot --region us-east-1 --recursive
  # #purge queues
  # - aws sqs purge-queue --queue-url https://sqs.us-east-1.amazonaws.com/127516845550/ion_reporter_queue
  # - aws sqs purge-queue --queue-url https://sqs.us-east-1.amazonaws.com/127516845550/ion_reporter_queue_dlx
  # - aws sqs purge-queue --queue-url https://sqs.us-east-1.amazonaws.com/127516845550/patient_queue
  # - aws sqs purge-queue --queue-url https://sqs.us-east-1.amazonaws.com/127516845550/patient_queue_deadletter
  # - aws sqs purge-queue --queue-url https://sqs.us-east-1.amazonaws.com/127516845550/treatment_arm_queue
notifications:
  slack:
    rooms:
      - clinicalbiomed:W5L3wQ69vtL1XJCo8uT3oQgY
    template:
      - "Build <%{build_url}|#%{build_number}> (<%{compare_url}|%{commit}>) of %{repository}@%{branch} %{result} in %{duration} %{commit_message}"
