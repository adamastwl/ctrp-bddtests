sudo: required
services:
  - docker
language: node_js
addons:
  firefox: "45.0.2"
node_js:
  - 6
  
before_install:
  - echo $TRIGGER_REPO
  - echo $AUTHOR
  - echo $TRIGGER_VER
  - echo $CUC_TAG
  # Set Ruby version
  - rvm use --install --default --binary ruby-2.3.1
  # Install dependencies, chrome & chromium, aws cli
  - wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
  - sudo sh -c 'echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
  - sudo apt-get update && sudo apt-get install -y google-chrome-stable awscli chromium-bsu
  # Install xvfb
  - "/sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -ac -screen 0 1280x1024x16"
before_script:
  # Update Ruby cucumber dependencies
  #- brew update
  #- brew install postgresql
  #- gem install pg
  - gem install bundler
  - bundle install
  - cd ..
  # Version reporting
  - ruby -v
  - bundle --version
  - gem --version
  - ls -alh
  - cd ctrp-bddtests/bdd_reporter
  - npm install
  - cd ../..

  # Database drop and recreate
  # PA database
  - export DBUSER=$DBUSERPA
  - export PGPASSWORD=$DBPASSWORDPA
  - export DBSCHEMA=$DBSCHEMAPA
  - cd ctrp-bddtests
  - aws s3 ls s3://ctrp-db-dumps/$DBDUMPPA --region us-east-1
  - aws s3 cp s3://ctrp-db-dumps/$DBDUMPPA.data . --region us-east-1
  - pg_restore -V
  - echo $DBSERVERHOST 
  - echo $DBUSER
  - echo $DBSERVERPORT
  - echo $DBSCHEMA
  - echo $DBDUMPPA

#  - psql -h $DBSERVERHOST -U $DBUSER -d $DBSCHEMA -f SQL/listorgs.sql
#  - psql -h $DBSERVERHOST -v v1=$DBUSER -U $DBUSER -p $DBSERVERPORT -d $DBSCHEMA -f SQL/truncate.sql
#  - psql -h $DBSERVERHOST -U $DBUSER -d $DBSCHEMA -f SQL/listorgs.sql
#  - if pg_restore -h $DBSERVERHOST -U $DBUSER -p $DBSERVERPORT -d $DBSCHEMA -v $DBDUMPPA.data; then echo $?; fi
#  - psql -h $DBSERVERHOST -U $DBUSER -d $DBSCHEMA -f SQL/listorgs.sql



  # - if pg_restore -h $DBSERVERHOST -U $DBUSER -p $DBSERVERPORT -d $DBSCHEMA -Fc $DBDUMPPA 2> /dev/null; then echo $?; fi

  # PO database
  - export DBUSER=$DBUSERPO
  - export PGPASSWORD=$DBPASSWORDPO
  - export DBSCHEMA=$DBSCHEMAPO
  - aws s3 ls s3://ctrp-db-dumps/$DBDUMPPO --region us-east-1
  - aws s3 cp s3://ctrp-db-dumps/$DBDUMPPO.data . --region us-east-1
#  - psql -h $DBSERVERHOST -U $DBUSER -d $DBSCHEMA -f SQL/listorgs.sql
#  - psql -h $DBSERVERHOST -v v1=$DBUSER -U $DBUSER -p $DBSERVERPORT -d $DBSCHEMA -f SQL/truncate.sql
#  - psql -h $DBSERVERHOST -U $DBUSER -d $DBSCHEMA -f SQL/listorgs.sql
#  - if pg_restore -h $DBSERVERHOST -U $DBUSER -p $DBSERVERPORT -d $DBSCHEMA -v $DBDUMPPO.data; then echo $?; fi
#  - psql -h $DBSERVERHOST -U $DBUSER -d $DBSCHEMA -f Scripts/listorgs.sql




  # - if pg_restore -h $DBSERVERHOST -U $DBUSER -p $DBSERVERPORT -d $DBSCHEMA -Fc $DBDUMPPO; then echo $?; fi



  # - mvn -Dhttps.protocols=TLSv1.1,TLSv1.2 -Pinit-db,local sql:execute
    # Install xvfb
  - "export DISPLAY=:99.0"
  - "sh -e /etc/init.d/xvfb start"
script:
  - export STATUS=0
  - export CURRENT_STATUS=0
  - export DCT_API_TAG="@DCT_API"
  - export CT_API_TAG="@CT_API"
  - export PO_TAG="@PO"
  - export PA_TAG="@PA"
  - export CTRP_DWH_TAG="@CTRP_DWH"
  - export CTRP_MISC_TAG="@CTRP_MISC"
  - echo $CUC_TAG
  - echo $DCT_API
  - pwd
  # - cd ctrp-bddtests/ctrpUI/
  # - bundle install
  # - cucumber features/ -t @PA_HIGH --format pretty --format json --out ../results/ctrp_pa_high_output.json --expand && cucumber features/ -t @PA_MEDIUM --format json --out ../results/ctrp_pa_medium_output.json --expand
  # run DCT API tests
  - |
    if [ "$CUC_TAG" == "$DCT_API_TAG" ]; then
      rm results/*_output.json
      cd ctrpBackend/
      cucumber features/ -t @DCT_HIGH --format json --out ../results/dct_api_high_output.json --expand && cucumber features/ -t @DCT_MEDIUM --format json --out ../results/dct_api_medium_output.json --expand
    fi
  # run CT API tests
  - |
    if [ "$CUC_TAG" == "$CT_API_TAG" ]; then
      rm results/*_output.json
      cd ctrpBackend/
      cucumber features/ -t @IMPORT_CT_API_HIGH --format json --out ../results/ct_api_high_output.json --expand && cucumber features/ -t @IMPORT_CT_API_MEDIUM --format json --out ../results/ct_api_medium_output.json --expand
    fi
  # run CTRP MISC tests
  - |
    if [ "$CUC_TAG" == "$CTRP_MISC_TAG" ]; then
      cd ctrpBackend/
      cucumber features/ -t @CTRP_MISC --format json --out ../results/output.json --expand
    fi
  # run CTRP datawarehouse tests
  - |
    if [ "$CUC_TAG" == "$CTRP_DTW_TAG" ]; then
      cd ctrpBackend/
      cucumber features/ -t @CTRP_DWH --format json --out ../results/output.json --expand
    fi
  # run CTRP PO UI tests
  - |
    if [ "$CUC_TAG" == "$PO_TAG" ]; then
      cd ctrpUI/
      bundle install
      cucumber features/ -t @PO_HIGH --format json --out ../results/ctrp_po_high_output.json --expand && cucumber features/ -t @PO_MEDIUM --format json --out ../results/ctrp_po_high_output.json --expand
    fi
  # run CTRP PA UI tests
  - |
    if [ "$CUC_TAG" == "$PA_TAG" ]; then
      cd ctrpUI/
      bundle install
      cucumber features/ -t @PA_HIGH,@EXPORT_HIGH --format pretty --format json --out ../results/ctrp_pa_high_output.json --expand && cucumber features/ -t @PA_MEDIUM,@EXPORT_MEDIUM --format json --out ../results/ctrp_pa_medium_output.json --expand
    fi
  # run ctrp-bddtests/ctrpBackend tests by the tag name
  # To export the results to the JIRA test execution set
  # - curl -H "Content-Type: application/json" -X POST -u ahmeds6:pass --data @results/output.json  https://tracker.nci.nih.gov/rest/raven/1.0/import/execution/cucumber
  # - ls -alt
  # - mv results/ results_critical/; mkdir results

  - touch ../results/tmp.json
  - for filename in ../results/*.json; do filesize=$(wc -c <"$filename"); if [ $filesize -le 0 ]; then echo $filename is 0 bytes, deleted it; rm $filename; fi; done
  - node bdd_reporter/support/generate_report.js
#  - cd ..
#  - ls -alt
#  - mv results/ results_critical/; mkdir results
  - TRAVIS_TEST_RESULT=$STATUS

after_success:
  # Run Low tag
  - pwd
  # run DCT API LOW tests
  - |
    if [ "$CUC_TAG" == "$DCT_API_TAG" ]; then
      cd ../ctrpBackend/
      cucumber features/ -t @DCT_LOW --format json --out ../results/dct_api_low_output.json --expand
    fi
  # run CT API tests
  - |
    if [ "$CUC_TAG" == "$CT_API_TAG" ]; then
      cd ../ctrpBackend/
      cucumber features/ -t @IMPORT_CT_API_LOW --format json --out ../results/ct_api_low_output.json --expand
    fi
  # run CTRP PO UI LOW tests
  - |
    if [ "$CUC_TAG" == "$PO_TAG" ]; then
      cd ../ctrpUI/
      bundle install
      cucumber features/ -t @PO_LOW --format json --out ../results/ctrp_po_low_output.json --expand
    fi
  # run CTRP PA LOW tests
  - |
    if [ "$CUC_TAG" == "$PA_TAG" ]; then
      cd ../ctrpUI/
      bundle install
      cucumber features/ -t @PA_LOW --format json --out ../results/ctrp_pa_low_output.json --expand
    fi
  # Deploy to AWS UAT (comment this to disable UAT push)
  - echo "Deploying to AWS UAT"
  - docker run -it --rm -e AWS_ACCESS_KEY_ID=$UAT_AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$UAT_AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION=us-east-1 silintl/ecs-deploy 
    --cluster CTRP-UAT-Backend --service-name CTRP-$TRIGGER_REPO-UAT 
    -i ctrp/$TRIGGER_REPO:$TRIGGER_VER
  # Trigger Travis script #3, UAT Tests
  # - curl -s -X POST -H "Content-Type:application/json" -H "Accept:application/json" -H "Travis-API-Version:3" -H "Authorization:token $UAT_TRAVIS_TOKEN" -d "{\"request\":{\"message\":\"Triggered by $TRIGGER_REPO $TRAVIS_COMMIT\", \"branch\":\"master\", \"config\":{\"env\":{\"matrix\":[\"TRIGGER_REPO=$TRIGGER_REPO;CUC_TAG=$CUC_TAG\"]}}}}" https://api.travis-ci.org/repo/CBIIT%2Fnci-uMatch-uattests/requests
#after_failure:

after_script:
  - export DATE_TRIM=`TZ=America/New_York date "+%m-%d-%y"`
  #Send result json to S3 for review

  - aws s3 cp ~/build/CBIIT/ctrp-bddtests/results_critical/cucumber_report.html s3://ctrp-test-reports/$DATE_TRIM/critical$CUC_TAG.html --region us-east-1
  - aws s3 cp ~/build/CBIIT/ctrp-bddtests/results_critical/screenshot s3://ctrp-test-reports/$DATE_TRIM/screenshot --region us-east-1 --recursive

  - aws s3 cp ~/build/CBIIT/ctrp-bddtests/results/cucumber_report.html s3://ctrp-test-reports/$DATE_TRIM/non-critical$CUC_TAG.html --region us-east-1
  - aws s3 cp ~/build/CBIIT/ctrp-bddtests/results/screenshot s3://ctrp-test-reports/$DATE_TRIM/screenshot --region us-east-1 --recursive


  - export TIME_TRIM=`TZ=America/New_York date "+%H:%M:%S"`
  - export CUC_TAG_TRIM=${CUC_TAG//@/}

  - curl -X PUT "http://ctrp-inttest-alb-backend-1739456098.us-east-1.elb.amazonaws.com:3025//reports/update/$DATE_TRIM/$CUC_TAG_TRIM/$TIME_TRIM" -d ''


notifications:
  slack:
    rooms:
      - clinicalbiomed:W5L3wQ69vtL1XJCo8uT3oQgY
    template:
      - "Build <%{build_url}|#%{build_number}> (<%{compare_url}|%{commit}>) of %{repository}@%{branch} %{result} in %{duration} %{commit_message}"
